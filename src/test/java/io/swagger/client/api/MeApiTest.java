/*
 * Docket API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.Event;
import io.swagger.client.model.MeEventPutRequestBody;
import io.swagger.client.model.MeEventsPostRequestBody;
import io.swagger.client.model.MePutRequestBody;
import io.swagger.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MeApi
 */
@Ignore
public class MeApiTest {

    private final MeApi api = new MeApi();

    
    /**
     * Creates a new event for the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMyEventTest() throws ApiException {
        MeEventsPostRequestBody meEventsPostRequestBody = null;
        Event response = api.createMyEvent(meEventsPostRequestBody);

        // TODO: test validations
    }
    
    /**
     * Deletes the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMeTest() throws ApiException {
        api.deleteMe();

        // TODO: test validations
    }
    
    /**
     * Deletes an event for the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMyEventByIdTest() throws ApiException {
        String id = null;
        api.deleteMyEventById(id);

        // TODO: test validations
    }
    
    /**
     * Fetches the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeTest() throws ApiException {
        User response = api.getMe();

        // TODO: test validations
    }
    
    /**
     * Fetches a specific event for the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMyEventByIdTest() throws ApiException {
        String id = null;
        Event response = api.getMyEventById(id);

        // TODO: test validations
    }
    
    /**
     * Fetches all events for the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMyEventsTest() throws ApiException {
        List<Event> response = api.getMyEvents();

        // TODO: test validations
    }
    
    /**
     * Updates the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMeTest() throws ApiException {
        MePutRequestBody mePutRequestBody = null;
        User response = api.updateMe(mePutRequestBody);

        // TODO: test validations
    }
    
    /**
     * Updates an event for the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMyEventByIdTest() throws ApiException {
        String id = null;
        MeEventPutRequestBody meEventPutRequestBody = null;
        Event response = api.updateMyEventById(id, meEventPutRequestBody);

        // TODO: test validations
    }
    
}
